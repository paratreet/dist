mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidData.h";
  class CentroidVisitor;
  include "Node.h";
  include "TEHolder.h";
  class CProxy_Reader;

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  readonly int num_iterations;
  readonly CProxy_TreeElement<CentroidData> centroid_calculator;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry void doneUp();
    entry [reductiontarget] void doneDown();

    // debug
    entry [reductiontarget] void checkParticlesChangedDone(bool result);
  };

  message ParticleMsg {
    Particle particles[];
  };

  template <class Data> //hi
  message MultiMsg {
    Particle particles[];
    Node<Data> nodes[];
  };
  
  message MultiMsg<CentroidData>;

  template <typename Data>
  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
    entry void triggerRequest();
    template<typename Visitor>
    entry void upOnly(TEHolder<Data>);
    template<typename Visitor>
    entry void startDown();
    template<typename Visitor>
    entry void requestNodes(Key, int);
    template<typename Visitor>
    entry void restoreData(Key, Data);
    template<typename Visitor>
    entry void addCache(MultiMsg<Data>*);
    entry void perturb(Real timestep);
    entry void flush(CProxy_Reader);
    entry void rebuild(const CkCallback&);

    entry void checkParticlesChanged(const CkCallback&);
  };

  array [1d] TreePiece<CentroidData>;
  extern entry void TreePiece<CentroidData> upOnly<CentroidVisitor> (TEHolder<CentroidData>);
  extern entry void TreePiece<CentroidData> startDown<GravityVisitor> ();
  extern entry void TreePiece<CentroidData> requestNodes<GravityVisitor> (Key, int);
  extern entry void TreePiece<CentroidData> restoreData<GravityVisitor> (Key, CentroidData);
  extern entry void TreePiece<CentroidData> addCache<GravityVisitor> (MultiMsg<CentroidData>*);

  template <typename Data>
  array [1d] TreeElement {
    entry TreeElement();
    template <typename Visitor>
    entry [createhere] void receiveData(CProxy_TreePiece<Data>, Data, int);
    template <typename Visitor>
    entry void requestData(int);
    entry void print();
  };

  array [1d] TreeElement<CentroidData>;
  extern entry void TreeElement<CentroidData> receiveData<CentroidVisitor>(CProxy_TreePiece<CentroidData>, CentroidData, int);
  extern entry void TreeElement<CentroidData> requestData<GravityVisitor>(int);

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void computeUniverseBoundingBox(const CkCallback&);    
    entry void assignKeys(BoundingBox&, const CkCallback&);
    template <typename Data>
    entry void request(CProxy_TreePiece<Data>, int, int);
    entry void countOct(std::vector<Key>&, const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    template <typename Data>
    entry void flush(int, int, CProxy_TreePiece<Data>);
  };

  extern entry void Reader request<CentroidData>(CProxy_TreePiece<CentroidData>, int, int);
  extern entry void Reader flush<CentroidData>(int, int, CProxy_TreePiece<CentroidData>);
};
